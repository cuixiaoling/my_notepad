布局传统解决方案，基于盒状模型，依赖display属性+position属性+float属性
传统的垂直居中
有宽高
    行内元素
    line-height:height;
    text-align:center; 有宽的时候，margin: 0 auto;
    margin: 上下 左右； margin:上 左右 下 ；margin:上 右 下 左； 顺时针

    块级元素
    position:absolute;left:50%;top:50%;margin-left:-width*0.5;
没有宽高
    position:absolute;left:50%;top:50%;transform:translateY(-50%)
box-sizing:content-box;
box-sizing:border-box; 
为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。
经常用于，设置了100%；但是还有padding 的时候

flex 布局
子元素 float clear和vertical-align 属性消失
.body{
    display:flex; // inline-flex;
    flex-direction:  项目的排列方向
        row(默认值) 水平左侧
        row-reverse 水平右侧
        column 垂直方向上侧
        column-reverse 下侧

    flex-wrap:
        nowrap(默认不换行)
        wrap 换行
        wrap-reverse 换行，第一行在下

    flex-flow: 是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。
    <flex-direction> | <flex-wrap>

    justify-content:  在主轴上的对齐方式
        flex-start 
        flex-end
        center
        space-between
        space-around

    align-items:  项目在交叉轴上如何对齐
        flex-start
        flex-end
        center
        baseline: 项目的第一行文字的基线对齐，基线为文字的下边线
        stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。

    align-content: 多根轴线的对齐方式
}
.item{
    order:<integer> 定义项目的排列顺序。数值越小，排列越靠前，默认为0。
    flex-grow:<number> 项目的放大比例，默认为0，即如果存在剩余空间，也不放大。
    flex-shrink:<number> 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
    flex-basis: <length> | auto; 可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。
    flex 属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。
        none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
    align-self 
    允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素
    的align-items 属性，如果没有父元素，则等同于stertch -- 延伸
        auto
        flex-start
        flex-end
        center
        baseline
        stretch
}

js 对数组，字符串常用的方法
Array
数组变字符串 .join 返回字符串
截取数组片段 .slice(indexStart,indexEnd) 返回数组片段 indexEnd 可以是负值 (不含indexEnd)
删除并添加   .splice(删除index,几个,添加的内容)
1，改变原数组
2，返回删除的部分
3，再删除的开始添加内容
String
字符串变数组 .split 返回一个数组
截取字符串片段 .slice() || .substr(index,num) num 截取的长度




es6 常用的方法
字符串的拼接 `${变量}haha`

1.let, const 都是块级作用域，其有效范围仅在代码块中。
2.模板字符串
`出售 <span>${obj.num}</span> 剩下 <span>${obj.showNum}</span>`
3.字符串遍历 输出 补全
    for(let item of 'str'){
        console.log(item); // str
    }
//参数1：[number] 目标字符串长度
//参数2：[string] 进行补全的字符串
'123'.padStart(5, '0')//00123 - 字符串不足5位，在头部补充不足长度的目标字符串
'345'.padEnd(5, '0')//34500 - 在尾部进行字符串补全
4.数组扩展
Array.of(3,4,5)//快速转换为数组 [3,4,5]
数组的拼接 let arr = [...arr1,..arr2]  所有内容合并，但并不会去除重复
for(let i of ['x','y'].keys()){
    console.log(i) // 0 1
}
for(let elem of ['x','y'].values()){
    console.log
}
取出对应的index，elem
for(let [index,elem] of ['x','y'].entries()){
    console.log(index,elem) // 0 "x" 1 "y"
}
5 对象扩展
let a="abc"
let b={a} // b={a:'abc'}
判断对象是否为数组
if(Object.isArray(obj)){}




class 真正的类概念
promise 异步
模块开发 import export export default

1， view hover-class 
    propagation 冒泡 ，hover-stop-propagation 指定是否阻止本节点的祖先节点出现冒泡点击态
    hover-start-time
    hover-stay-time

小海航运圈
首页 - 瀑布流
多个input 框取值问题
bindinput bintblur

交易中心
组件开发

<td  v-html="item.noticeContent" style="padding-left: 60px;"></td>






